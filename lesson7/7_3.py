# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток,
# соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет
#  строку: *****\n*****\n*****.

class Cell:
    def __init__(self, cellule):
        self.cellule = cellule

    def __add__(self, other):
        return self.cellule + other.cellule

    def __sub__(self, other):
        if self.cellule - other.cellule >= 0:
            return self.cellule - other.cellule
        else:
            print('Клетка не может быть отрицательной.')

    def __mul__(self, other):
        return self.cellule * other.cellule

    def __truediv__(self, other):
        result = self.cellule / other.cellule
        return round(result)

    def make_order(self, cellule_row):
        full_row = self.cellule // cellule_row
        remainder_row = self.cellule % cellule_row
        print((cellule_row * '*' + '\n') * full_row, end='')
        print(remainder_row * '*')


cell1 = Cell(50)
cell2 = Cell(10)
print(cell1 + cell2)
print(cell1 - cell2)
print(cell1 * cell2)
print(cell1 / cell2)

cell1.make_order(8)
